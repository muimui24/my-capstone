generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  role             String             @db.VarChar(255)
  email            String?            @unique
  image            String?
  isActive         Boolean?
  creationDate     DateTime?          @default(now())
  modifiedBy       String?            @db.VarChar(255)
  modificationDate DateTime?          @default(now())
  firstName        String             @db.VarChar(255)
  lastName         String             @db.VarChar(255)
  middleName       String             @db.VarChar(255)
  contactNumber    String             @db.VarChar(255)
  userName         String
  password         String             @db.VarChar(255)
  accounts         Account[]
  sessions         Session[]
  t_borrowingbooks t_borrowingbooks[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model m_books {
  id Int @id @default(autoincrement())

  title            String             @db.VarChar(255)
  author           String             @db.VarChar(255)
  description      String?            @db.VarChar(255)
  code             String
  isActive         Boolean?
  createdby        String?            @db.VarChar(255)
  creationDate     DateTime?          @default(now())
  modifiedBy       String?            @db.VarChar(255)
  modificationDate DateTime?          @default(now())
  category         String
  t_borrowingbooks t_borrowingbooks[]
}

model m_ebooks {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(255)
  author           String    @db.VarChar(255)
  description      String?   @db.VarChar(255)
  downloadLink     String?   @db.VarChar(255)
  image            String?
  publisher        String?
  rating           Int?
  isActive         Boolean?
  category         String
  creationDate     DateTime? @default(now())
  modifiedBy       String?   @db.VarChar(255)
  modificationDate DateTime? @default(now())

}

model m_booksInventory {
  id               Int       @id @default(autoincrement())
  isActive         Boolean?
  createdby        String    @db.VarChar(255)
  creationDate     DateTime? @default(now())
  modifiedBy       String?   @db.VarChar(255)
  modificationDate DateTime? @default(now())
  headerId         Int
  code             String    @unique(map: "code") @db.VarChar(255)

}

model t_borrowingbooks {
  id            Int       @id @default(autoincrement())
  creationDate  DateTime? @default(now())
  borrowingDate DateTime  @default(now())
  isApproved    Boolean?  @default(false)

  isIssued         Boolean?  @default(false)
  issuedDate       DateTime?
  targetreturnDate DateTime?
  DateReturned     DateTime?
  isReturned       Boolean?  @default(false)
  isCancelled      Boolean?  @default(false)
  bookId           Int
  book             m_books?  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookCode         String
  userId           String
  user             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  note             String?   @db.VarChar(255)
  quantity         Int
}
